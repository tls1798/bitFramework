<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd">
	
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" 
		p:driverClassName="com.mysql.cj.jdbc.Driver"
		p:url="jdbc:mysql://localhost:3306/scott"
		p:username="user01" p:password="1234"
		p:maxActive="3"
		p:maxIdle="5"
		p:minIdle="1"
		p:maxWait="3000"
		/>
		
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate"
		p:dataSource-ref="dataSource"/>
	<!-- 
	<bean id="myModule" class="com.bit.sts05.service.MyModuleImpl"></bean>
	
	<bean id="userAfter" class="com.bit.sts05.utils.UserAfter"></bean>
	<bean id="userAround" class="com.bit.sts05.utils.UserAround"></bean>
	
		
	<bean id="userBefore" class="com.bit.sts05.utils.UserBefore"></bean>
	<aop:config>
		<aop:pointcut expression="execution(* func*(..))" id="modulePointCut"/>
		<aop:aspect ref="userBefore">
			<aop:before method="beforeTargetMethod" pointcut-ref="modulePointCut"/>
		</aop:aspect>
		<aop:aspect ref="userAfter">
			<aop:after method="afterTargetMethod" pointcut-ref="modulePointCut"/>
			<aop:after-returning method="afterReturningTargetMethod" 
				pointcut-ref="modulePointCut" returning="obj"/>
			<aop:after-throwing method="afterThrowingTargetMethod" 
				pointcut-ref="modulePointCut" throwing="exp"/>
		</aop:aspect>
		<aop:aspect ref="userAround">
			<aop:around method="aroundTargetMethod" pointcut-ref="modulePointCut" />
		</aop:aspect>		 
	</aop:config>
	
	-->

	
	
	<bean id="autoLogging" class="com.bit.sts05.utils.AutoLogging"/>		
	
	<aop:config>
		<aop:pointcut expression="execution(* com.bit.sts05.model.EmpDao.*(..))" id="beforelog"/>
		<aop:aspect ref="autoLogging">
			<aop:before method="beforeAop" pointcut-ref="beforelog"/>
		</aop:aspect>
	</aop:config>
	<context:component-scan base-package="com.bit.sts05.model">
	</context:component-scan>

	
	  
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	  <property name="dataSource" ref="dataSource"/>
	</bean>
 
        <!-- 트랜잭션 Advice를 설정한다. 	
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="*" rollback-for="Exception"/>
		</tx:attributes>
	</tx:advice>-->
 
        <!-- 트랜잭션 Pointcut를 설정한다.    
      
	<aop:config>
		<aop:pointcut id="requiredTx"
			expression="execution(* com.bit.sts05.service.EmpService.*(..))"/>
		<aop:advisor advice-ref="txAdvice"
			pointcut-ref="requiredTx" />
	</aop:config>
	
	  -->
	<context:component-scan base-package="com.bit.sts05.service">
	</context:component-scan>
	<tx:annotation-driven transaction-manager="txManager"/>
	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
	
</beans>
